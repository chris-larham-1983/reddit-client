{"version":3,"sources":["utils/shortenNumber.js","components/Card/Card.jsx","features/Avatar/Avatar.jsx","features/Comment/Comment.jsx","features/Post/Post.jsx","utils/getRandomNumber.js","features/Post/PostLoading.jsx","api/reddit.js","store/redditSlice.js","features/Header/Header.jsx","features/Home/Home.jsx","store/subRedditSlice.js","features/Subreddits/Subreddits.jsx","App.jsx","store/index.js","index.jsx"],"names":["shortenNumber","num","digits","units","i","length","decimal","toFixed","Card","props","className","children","Avatar","name","src","alt","Comment","comment","author","moment","unix","created_utc","fromNow","source","body","Post","useState","voteValue","setVoteValue","post","onToggleComments","onHandleVote","newValue","key","id","type","onClick","aria-label","ups","title","href","url","target","style","color","showingComments","permalink","num_comments","errorComments","loadingComments","comments","map","min","max","Math","floor","random","PostLoading","width","getRandomNumber","height","API_ROOT","getSubredditPosts","subreddit","a","fetch","response","json","data","getSubreddits","getPostComments","initialState","posts","error","isLoading","searchTerm","selectedSubreddit","localStorage","getItem","redditSlice","createSlice","reducers","setPosts","state","action","payload","startGetPosts","getPostsSuccess","document","getElementsByTagName","scrollIntoView","getPostsFailed","setSearchTerm","setSelectedSubreddit","toggleShowingComments","startGetComments","getCommentsSuccess","index","getCommentsFailed","actions","fetchPosts","dispatch","postsWithMetadata","selectSelectedSubreddit","reddit","selectFilteredPosts","createSelector","filter","toLowerCase","includes","Header","searchTermLocal","setSearchTermLocal","useSelector","threadTopic","useDispatch","useEffect","onSearchTermSubmit","e","preventDefault","onSubmit","placeholder","value","onChange","Home","fetchComments","animation","Array","fill","subRedditSlice","subreddits","startGetSubreddits","getSubredditsSuccess","getSubredditsFailed","selectSubreddits","Subreddits","setItem","icon_img","display_name","border","primary_color","App","configureStore","reducer","combineReducers","redditReducer","subRedditReducer","ReactDOM","render","StrictMode","store","getElementById"],"mappings":"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","file":"static/js/main.fd3eded5.chunk.js","sourcesContent":["/**\n * Shorten number to thousands, millions, billions, etc.\n * Source: https://stackoverflow.com/questions/9461621/format-a-number-as-2-5k-if-a-thousand-or-more-otherwise-900\n * @param {number} num Number to shorten\n * @param {number} digits The number of digits to appear after the decimal point.\n */\nconst shortenNumber = (num, digits) => {\n  const units = ['k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];\n\n  for (let i = units.length - 1; i >= 0; i -= 1) {\n    const decimal = 1000 ** (i + 1);\n\n    if (num <= -decimal || num >= decimal) {\n      return +(num / decimal).toFixed(digits) + units[i];\n    }\n  }\n\n  return num;\n};\n\nexport default shortenNumber;\n","import React from 'react';\nimport './Card.css';\n\nconst Card = (props) => {\n  return <div className={`card ${props.className}`}>{props.children}</div>;\n};\n\nexport default Card;\n","import React from 'react';\nimport './Avatar.css';\n\nconst Avatar = (props) => {\n  const { name } = props;\n\n  return (\n    <img\n      src={`https://avatars.dicebear.com/api/bottts/${name}.svg`}\n      alt={`${name} profile`}\n      className=\"avatar-profile-image\"\n    />\n  );\n};\n\nexport default Avatar;\n","import React from 'react';\nimport moment from 'moment';\nimport ReactMarkdown from 'react-markdown';\nimport './Comment.css';\nimport Avatar from '../Avatar/Avatar';\n\nconst Comment = (props) => {\n  const { comment } = props;\n  return (\n    <div className=\"comment\">\n      <div className=\"comment-metadata\">\n        <Avatar name={comment.author} />\n        <p className=\"comment-author\">{comment.author}</p>\n        <p className=\"comment-created-time\">\n          {moment.unix(comment.created_utc).fromNow()}\n        </p>\n      </div>\n      <ReactMarkdown source={comment.body} />\n    </div>\n  );\n};\n\nexport default Comment;\n","import React, { useState } from 'react';\nimport Skeleton from 'react-loading-skeleton';\nimport './Post.css';\nimport {\n  TiArrowUpOutline,\n  TiArrowUpThick,\n  TiArrowDownOutline,\n  TiArrowDownThick,\n  TiMessage,\n} from 'react-icons/ti';\nimport moment from 'moment';\nimport shortenNumber from '../../utils/shortenNumber';\nimport Card from '../../components/Card/Card';\nimport Comment from '../Comment/Comment';\nimport Avatar from '../Avatar/Avatar';\n\nconst Post = (props) => {\n  const [voteValue, setVoteValue] = useState(0);\n\n  const { post, onToggleComments } = props;\n\n  /**\n   * @param {number} newValue The new vote value\n   */\n  const onHandleVote = (newValue) => {\n    if (newValue === voteValue) {\n      setVoteValue(0);\n    } else if (newValue === 1) {\n      setVoteValue(1);\n    } else {\n      setVoteValue(-1);\n    }\n  };\n\n  const renderUpVote = () => {\n    if (voteValue === 1) {\n      return <TiArrowUpThick className=\"icon-action\" />;\n    }\n    return <TiArrowUpOutline className=\"icon-action\" />;\n  };\n\n  const renderDownVote = () => {\n    if (voteValue === -1) {\n      return <TiArrowDownThick className=\"icon-action\" />;\n    }\n    return <TiArrowDownOutline className=\"icon-action\" />;\n  };\n\n  const getVoteType = () => {\n    if (voteValue === 1) {\n      return 'up-vote';\n    }\n    if (voteValue === -1) {\n      return 'down-vote';\n    }\n\n    return '';\n  };\n\n  const renderComments = () => {\n    if (post.errorComments) {\n      return (\n        <div>\n          <h3>Error loading comments</h3>\n        </div>\n      );\n    }\n\n    if (post.loadingComments) {\n      return (\n        <div>\n          <Skeleton />\n          <Skeleton />\n          <Skeleton />\n          <Skeleton />\n        </div>\n      );\n    }\n\n    if (post.showingComments) {\n      return (\n        <div>\n          {post.comments.map((comment) => (\n            <Comment comment={comment} key={comment.id} />\n          ))}\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  return (\n    <article key={post.id}>\n      <Card>\n        <div className=\"post-wrapper\">\n          <div className=\"post-votes-container\">\n            <button\n              type=\"button\"\n              className={`icon-action-button up-vote ${\n                voteValue === 1 && 'active'\n              }`}\n              onClick={() => onHandleVote(1)}\n              aria-label=\"Up vote\"\n            >\n              {renderUpVote()}\n            </button>\n            <p className={`post-votes-value ${getVoteType()}`}>\n              {shortenNumber(post.ups, 1)}\n            </p>\n            <button\n              type=\"button\"\n              className={`icon-action-button down-vote ${\n                voteValue === -1 && 'active'\n              }`}\n              onClick={() => onHandleVote(-1)}\n              aria-label=\"Down vote\"\n            >\n              {renderDownVote()}\n            </button>\n          </div>\n          <div className=\"post-container\">\n            <h3 className=\"post-title\">{post.title}</h3>\n\n            <div className=\"post-link-container\">\n              <a href={post.url} target=\"_self\" style={{color: \"crimson\" }}>Read Full Post</a>\n            </div>\n\n            <div className=\"post-details\">\n              <span className=\"author-details\">\n                <Avatar name={post.author} />\n                <span className=\"author-username\">{post.author}</span>\n              </span>\n              <span>{moment.unix(post.created_utc).fromNow()}</span>\n              <span className=\"post-comments-container\">\n                <button\n                  type=\"button\"\n                  className={`icon-action-button ${\n                    post.showingComments && 'showing-comments'\n                  }`}\n                  onClick={() => onToggleComments(post.permalink)}\n                  aria-label=\"Show comments\"\n                >\n                  <TiMessage className=\"icon-action\" />\n                </button>\n                {shortenNumber(post.num_comments, 1)}\n              </span>\n            </div>\n\n            {renderComments()}\n          </div>\n        </div>\n      </Card>\n    </article>\n  );\n};\n\nexport default Post;\n","/**\n * Generates a number between min and max.\n * @param {number} min\n * @param {number} max\n */\nexport default (min, max) => {\n  return Math.floor(Math.random() * max) + min;\n};\n","import React from 'react';\nimport Skeleton from 'react-loading-skeleton';\nimport './Post.css';\nimport './PostLoading.css';\nimport {\n  TiArrowUpOutline,\n  TiArrowDownOutline,\n  TiMessage,\n} from 'react-icons/ti';\nimport getRandomNumber from '../../utils/getRandomNumber';\n\nconst PostLoading = () => {\n  return (\n    <article className=\"post\">\n      <div className=\"post-votes-container\">\n        <button\n          type=\"button\"\n          className=\"icon-action-button up-vote\"\n          aria-label=\"Up vote\"\n        >\n          <TiArrowUpOutline className=\"icon-action\" />\n        </button>\n        <Skeleton className=\"post-votes-value post-votes-value-loading\" />\n        <button\n          type=\"button\"\n          className=\"icon-action-button down-vote\"\n          aria-label=\"Down vote\"\n        >\n          <TiArrowDownOutline className=\"icon-action\" />\n        </button>\n      </div>\n      <div className=\"post-container\">\n        <h3 className=\"post-title\">\n          <Skeleton width={getRandomNumber(100, 200)} />\n        </h3>\n\n        <div className=\"post-image-container\">\n          <Skeleton height={250} />\n        </div>\n\n        <div className=\"post-details\">\n          <span>\n            <Skeleton width={getRandomNumber(20, 50)} />\n          </span>\n          <span>\n            <Skeleton width={getRandomNumber(50, 100)} />\n          </span>\n          <span className=\"post-comments-container\">\n            <button\n              type=\"button\"\n              className=\"icon-action-button\"\n              aria-label=\"Show comments\"\n            >\n              <TiMessage className=\"icon-action\" />\n            </button>\n            <Skeleton width={getRandomNumber(10, 50)} />\n          </span>\n        </div>\n      </div>\n    </article>\n  );\n};\n\nexport default PostLoading;\n","export const API_ROOT = 'https://www.reddit.com';\n\nexport const getSubredditPosts = async (subreddit) => {\n  const response = await fetch(`${API_ROOT}${subreddit}.json`);\n  const json = await response.json();\n\n  return json.data.children.map((post) => post.data);\n};\n\nexport const getSubreddits = async () => {\n  const response = await fetch(`${API_ROOT}/subreddits.json`);\n  const json = await response.json();\n\n  return json.data.children.map((subreddit) => subreddit.data);\n};\n\nexport const getPostComments = async (permalink) => {\n  const response = await fetch(`${API_ROOT}${permalink}.json`);\n  const json = await response.json();\n\n  return json[1].data.children.map((subreddit) => subreddit.data);\n};\n","import { createSlice, createSelector } from '@reduxjs/toolkit';\nimport { getSubredditPosts, getPostComments } from '../api/reddit';\n\nconst initialState = {\n  posts: [],\n  error: false,\n  isLoading: false,\n  searchTerm: '',\n  selectedSubreddit: localStorage.getItem(\"selectedSubreddit\") || '/r/Coding/',\n};\n\nconst redditSlice = createSlice({\n  name: 'redditPosts',\n  initialState,\n  reducers: {\n    setPosts(state, action) {\n      state.posts = action.payload;\n    },\n    startGetPosts(state) {\n      state.isLoading = true;\n      state.error = false;\n    },\n    getPostsSuccess(state, action) {\n      state.isLoading = false;\n      state.posts = action.payload;\n      document.getElementsByTagName(\"H2\")[0].scrollIntoView(true);\n    },\n    getPostsFailed(state) {\n      state.isLoading = false;\n      state.error = true;\n    },\n    setSearchTerm(state, action) {\n      state.searchTerm = action.payload;\n    },\n    setSelectedSubreddit(state, action) {\n      state.selectedSubreddit = action.payload;\n      state.searchTerm = '';\n    },\n    toggleShowingComments(state, action) {\n      state.posts[action.payload].showingComments = !state.posts[action.payload]\n        .showingComments;\n    },\n    startGetComments(state, action) {\n      state.posts[action.payload].showingComments = !state.posts[action.payload]\n        .showingComments;\n      if (!state.posts[action.payload].showingComments) {\n        return;\n      }\n      state.posts[action.payload].loadingComments = true;\n      state.posts[action.payload].error = false;\n    },\n    getCommentsSuccess(state, action) {\n      state.posts[action.payload.index].loadingComments = false;\n      state.posts[action.payload.index].comments = action.payload.comments;\n    },\n    getCommentsFailed(state, action) {\n      state.posts[action.payload].loadingComments = false;\n      state.posts[action.payload].error = true;\n    },\n  },\n});\n\nexport const {\n  getPostsFailed,\n  getPostsSuccess,\n  startGetPosts,\n  setSearchTerm,\n  setSelectedSubreddit,\n  getCommentsFailed,\n  getCommentsSuccess,\n  startGetComments,\n} = redditSlice.actions;\n\nexport default redditSlice.reducer;\n\nexport const fetchPosts = (subreddit) => async (dispatch) => {\n  try {\n    dispatch(startGetPosts());\n    const posts = await getSubredditPosts(subreddit);\n\n    const postsWithMetadata = posts.map((post) => ({\n      ...post,\n      showingComments: false,\n      comments: [],\n      loadingComments: false,\n      errorComments: false,\n    }));\n    dispatch(getPostsSuccess(postsWithMetadata));\n  } catch (error) {\n    dispatch(getPostsFailed());\n  }\n};\n\nexport const fetchComments = (index, permalink) => async (dispatch) => {\n  try {\n    dispatch(startGetComments(index));\n    const comments = await getPostComments(permalink);\n    dispatch(getCommentsSuccess({ index, comments }));\n  } catch (error) {\n    dispatch(getCommentsFailed(index));\n  }\n};\n\nconst selectPosts = (state) => state.reddit.posts;\nconst selectSearchTerm = (state) => state.reddit.searchTerm;\nexport const selectSelectedSubreddit = (state) =>\n  state.reddit.selectedSubreddit;\n\nexport const selectFilteredPosts = createSelector(\n  [selectPosts, selectSearchTerm],\n  (posts, searchTerm) => {\n    if (searchTerm !== '') {\n      return posts.filter((post) =>\n        post.title.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n\n    return posts;\n  }\n);\n","import React, { useState, useEffect } from 'react';\nimport { HiOutlineSearch } from 'react-icons/hi';\nimport './Header.css';\nimport { FaReddit } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setSearchTerm } from '../../store/redditSlice';\n\nconst Header = (props) => {\n  const [searchTermLocal, setSearchTermLocal] = useState('');\n  const searchTerm = useSelector((state) => state.reddit.searchTerm);\n  const threadTopic = props.selectedSubreddit;\n  const dispatch = useDispatch();\n\n  const onSearchTermChange = (e) => {\n    setSearchTermLocal(e.target.value);\n  };\n\n  useEffect(() => {\n    setSearchTermLocal(searchTerm);\n  }, [searchTerm]);\n\n  const onSearchTermSubmit = (e) => {\n    e.preventDefault();\n    dispatch(setSearchTerm(searchTermLocal));\n  };\n\n  return (\n    <header>\n      <div className=\"logo\">\n        <FaReddit className=\"logo-icon\" />\n        <p>\n          Reddit<span>Minimal</span>\n        </p>\n      </div>\n      <form className=\"search\" onSubmit={onSearchTermSubmit}>\n        <input\n          type=\"text\"\n          placeholder={`Search ${threadTopic}`}\n          value={searchTermLocal}\n          onChange={onSearchTermChange}\n          aria-label=\"Search posts\"\n        />\n        <button type=\"submit\" onClick={onSearchTermSubmit} aria-label=\"Search\">\n          <HiOutlineSearch />\n        </button>\n      </form>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AnimatedList } from 'react-animated-list';\nimport Post from '../Post/Post';\nimport PostLoading from '../Post/PostLoading';\nimport getRandomNumber from '../../utils/getRandomNumber';\nimport {\n  fetchPosts,\n  selectFilteredPosts,\n  setSearchTerm,\n  fetchComments\n} from '../../store/redditSlice';\nimport './Home.css';\nimport Header from '../Header/Header';\n\nconst Home = () => {\n  const reddit = useSelector((state) => state.reddit);\n  const { isLoading, error, searchTerm, selectedSubreddit } = reddit;\n  const posts = useSelector(selectFilteredPosts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if(selectedSubreddit !== '') {\n      dispatch(fetchPosts(selectedSubreddit));\n    }\n  }, [selectedSubreddit]);\n\n  const onToggleComments = (index) => {\n      return (permalink) => {\n          dispatch(fetchComments(index, permalink));\n      };\n  };\n\n  if(isLoading) {\n    return (\n      <AnimatedList animation=\"zoom\">\n        {Array(getRandomNumber(3, 10)).fill(<PostLoading />)}\n      </AnimatedList>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"error\">\n        <h2>Failed to load posts.</h2>\n        <button\n          type=\"button\"\n          onClick={() => dispatch(fetchPosts(selectedSubreddit))}\n        >\n          Try again\n        </button>\n      </div>\n    );\n  }\n\n  if (posts.length === 0) {\n    return (\n      <div className=\"error\">\n        <h2>No posts matching \"{searchTerm}\"</h2>\n        <button type=\"button\" onClick={() => dispatch(setSearchTerm(''))}>\n          Go home\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <nav>\n        <button\n            type='button'\n            onClick={()=> {\n              document.getElementsByTagName(\"H2\")[0].scrollIntoView();\n            }}>\n          <span><u>View Popular Subreddits</u></span>\n        </button>\n      </nav>\n        <h1><span className='headingText'>Posts for <span className='topic'>{selectedSubreddit}</span></span></h1>\n      <Header selectedSubreddit={selectedSubreddit} />\n      {posts.map((post, index) => (\n        <Post\n          key={post.id}\n          post={post}\n          onToggleComments={onToggleComments(index)}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default Home;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { getSubreddits } from '../api/reddit';\n\nconst initialState = {\n  subreddits: [],\n  error: false,\n  isLoading: false,\n};\n\nconst subRedditSlice = createSlice({\n  name: 'subreddits',\n  initialState,\n  reducers: {\n    startGetSubreddits(state) {\n      state.isLoading = true;\n      state.error = false;\n    },\n    getSubredditsSuccess(state, action) {\n      state.isLoading = false;\n      state.subreddits = action.payload;\n    },\n    getSubredditsFailed(state) {\n      state.isLoading = false;\n      state.error = true;\n    },\n  },\n});\n\nexport const {\n  getSubredditsFailed,\n  getSubredditsSuccess,\n  startGetSubreddits,\n} = subRedditSlice.actions;\n\nexport default subRedditSlice.reducer;\n\nexport const fetchSubreddits = () => async (dispatch) => {\n  try {\n    dispatch(startGetSubreddits());\n    const subreddits = await getSubreddits();\n    dispatch(getSubredditsSuccess(subreddits));\n  } catch (error) {\n    dispatch(getSubredditsFailed());\n  }\n};\n\nexport const selectSubreddits = (state) => state.subreddits.subreddits;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Card from '../../components/Card/Card';\nimport { fetchSubreddits, selectSubreddits } from '../../store/subRedditSlice';\nimport './Subreddits.css';\nimport {\n    setSelectedSubreddit,\n    selectSelectedSubreddit\n} from '../../store/redditSlice';\n\nconst Subreddits = () => {\n  const dispatch = useDispatch();\n  const subreddits = useSelector(selectSubreddits);\n  const selectedSubreddit = useSelector(selectSelectedSubreddit);\n\n  useEffect(() => {\n    dispatch(fetchSubreddits());\n  }, []);\n\n  return (\n    <Card className=\"subreddit-card\">\n        <h2><span>Popular Subreddits</span></h2>\n        <button\n            className='blockDisplay'\n            onClick={()=> {\n                document.getElementsByTagName(\"H1\")[0].scrollIntoView();\n            }}>View Posts for <span>{selectedSubreddit}</span></button>\n      <ul className=\"subreddits-list\">\n        {subreddits.map((subreddit) => (\n          <li\n            key={subreddit.id}\n            className={`${\n              selectedSubreddit === subreddit.url && `selected-subreddit`\n            }`}\n          >\n            <button\n              type=\"button\"\n              onClick={() => {\n                  dispatch(setSelectedSubreddit(subreddit.url));\n                  localStorage.setItem(\"selectedSubreddit\", subreddit.url);\n              }}\n            >\n              <img\n                src={\n                  subreddit.icon_img ||\n                  `https://avatars.dicebear.com/api/avataaars/${subreddit.display_name}.svg`\n                }\n                alt={`${subreddit.display_name}`}\n                className=\"subreddit-icon\"\n                style={{ border: `3px solid ${subreddit.primary_color}` }}\n              />\n              {subreddit.display_name}\n            </button>\n          </li>\n        ))}\n        <li\n            key='coding'\n            className={`${selectedSubreddit === '/r/Coding/' && `selected-subreddit`}`}\n        >\n              <button\n                  type=\"button\"\n                  onClick={() => {\n                      dispatch(setSelectedSubreddit('/r/Coding/'));\n                      localStorage.setItem(\"selectedSubreddit\", \"/r/Coding/\");\n                  }}\n                  className='topic1'\n              >\n                  <span>Coding Discussion</span>\n              </button>\n        </li>\n        <li\n            key='conspiracy'\n            className={`${selectedSubreddit === '/r/Conspiracy/' && `selected-subreddit`}`}\n        >\n              <button\n                  type=\"button\"\n                  onClick={() => {\n                      dispatch(setSelectedSubreddit('/r/Conspiracy/'));\n                      localStorage.setItem(\"selectedSubreddit\", \"/r/Conspiracy/\");\n                  }}\n                  className='topic2'\n              >\n                  <span>Conspiracy Theories</span>\n              </button>\n        </li>\n          <li\n              key='coronavirus'\n              className={`${selectedSubreddit === '/r/Coronavirus/' && `selected-subreddit`}`}\n          >\n              <button\n                  type=\"button\"\n                  onClick={() => {\n                      dispatch(setSelectedSubreddit('/r/Coronavirus/'));\n                      localStorage.setItem(\"selectedSubreddit\", \"/r/Coronavirus/\");\n                  }}\n                  className='topic3'\n              >\n                  <span>Coronavirus Discussion</span>\n              </button>\n          </li>\n          <li\n            key='debateEvolution'\n            className={`${selectedSubreddit === '/r/DebateEvolution/' && `selected-subreddit`}`}\n          >\n              <button\n                  type=\"button\"\n                  onClick={() => {\n                      dispatch(setSelectedSubreddit('/r/DebateEvolution/'));\n                      localStorage.setItem(\"selectedSubreddit\", \"/r/DebateEvolution/\")\n                  }}\n                  className='topic4'\n              >\n                  <span>Evolutionary Debate</span>\n              </button>\n          </li>\n          <li\n              key='debateReligion'\n              className={`${selectedSubreddit === '/r/DebateReligion/' && `selected-subreddit`}`}\n          >\n              <button\n                  type=\"button\"\n                  onClick={() => {\n                      dispatch(setSelectedSubreddit('/r/DebateReligion/'));\n                      localStorage.setItem(\"selectedSubreddit\", \"/r/DebateReligion/\");\n                  }}\n                  className='topic5'\n              >\n                  <span>Religious Debate</span>\n              </button>\n          </li>\n          <li\n              key='soccer'\n              className={`${selectedSubreddit === '/r/Soccer/' && `selected-subreddit`}`}\n          >\n              <button\n                  type=\"button\"\n                  onClick={() => {\n                      dispatch(setSelectedSubreddit('/r/Soccer/'));\n                      localStorage.setItem(\"selectedSubreddit\", \"/r/Soccer/\");\n                  }}\n                  className='topic6'\n              >\n                  <span>Soccer Chat</span>\n              </button>\n          </li>\n      </ul>\n    </Card>\n  );\n};\n\nexport default Subreddits;\n","import React from 'react';\nimport './App.css';\nimport Home from './features/Home/Home';\nimport Subreddits from './features/Subreddits/Subreddits';\n\nfunction App() {\n  return (\n    <>\n      <main>\n          <Home />\n          <Subreddits />\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","import { configureStore, combineReducers } from '@reduxjs/toolkit';\nimport redditReducer from './redditSlice';\nimport subRedditReducer from './subRedditSlice';\n\nexport default configureStore({\n  reducer: combineReducers({\n    reddit: redditReducer,\n    subreddits: subRedditReducer,\n  }),\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}