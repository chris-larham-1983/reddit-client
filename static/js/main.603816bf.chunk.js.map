{"version":3,"sources":["utils/shortenNumber.js","components/Card/Card.jsx","features/Avatar/Avatar.jsx","features/Comment/Comment.jsx","features/Post/Post.jsx","utils/getRandomNumber.js","features/Post/PostLoading.jsx","api/reddit.js","store/redditSlice.js","features/Header/Header.jsx","features/Home/Home.jsx","store/subRedditSlice.js","features/Subreddits/Subreddits.jsx","App.jsx","store/index.js","index.jsx"],"names":["shortenNumber","num","digits","units","i","length","decimal","toFixed","Card","props","className","children","Avatar","name","src","alt","Comment","comment","author","moment","unix","created_utc","fromNow","source","body","Post","useState","voteValue","setVoteValue","post","onToggleComments","onHandleVote","newValue","key","id","type","onClick","aria-label","ups","title","href","url","target","style","color","showingComments","permalink","num_comments","errorComments","loadingComments","comments","map","min","max","Math","floor","random","PostLoading","width","getRandomNumber","height","API_ROOT","getSubredditPosts","subreddit","a","fetch","response","json","data","getSubreddits","getPostComments","initialState","posts","error","isLoading","searchTerm","selectedSubreddit","localStorage","getItem","redditSlice","createSlice","reducers","setPosts","state","action","payload","startGetPosts","getPostsSuccess","getPostsFailed","setSearchTerm","setSelectedSubreddit","toggleShowingComments","startGetComments","getCommentsSuccess","index","getCommentsFailed","actions","fetchPosts","dispatch","postsWithMetadata","selectSelectedSubreddit","reddit","selectFilteredPosts","createSelector","filter","toLowerCase","includes","Header","searchTermLocal","setSearchTermLocal","useSelector","threadTopic","useDispatch","useEffect","onSearchTermSubmit","e","preventDefault","onSubmit","placeholder","value","onChange","Home","document","getElementsByTagName","scrollIntoView","fetchComments","animation","Array","fill","subRedditSlice","subreddits","startGetSubreddits","getSubredditsSuccess","getSubredditsFailed","selectSubreddits","Subreddits","setItem","icon_img","display_name","border","primary_color","App","configureStore","reducer","combineReducers","redditReducer","subRedditReducer","ReactDOM","render","StrictMode","store","getElementById"],"mappings":"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","file":"static/js/main.603816bf.chunk.js","sourcesContent":["/**\r\n * Shorten number to thousands, millions, billions, etc.\r\n * Source: https://stackoverflow.com/questions/9461621/format-a-number-as-2-5k-if-a-thousand-or-more-otherwise-900\r\n * @param {number} num Number to shorten\r\n * @param {number} digits The number of digits to appear after the decimal point.\r\n */\r\nconst shortenNumber = (num, digits) => {\r\n  const units = ['k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];\r\n\r\n  for (let i = units.length - 1; i >= 0; i -= 1) {\r\n    const decimal = 1000 ** (i + 1);\r\n\r\n    if (num <= -decimal || num >= decimal) {\r\n      return +(num / decimal).toFixed(digits) + units[i];\r\n    }\r\n  }\r\n\r\n  return num;\r\n};\r\n\r\nexport default shortenNumber;\r\n","import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = (props) => {\r\n  return <div className={`card ${props.className}`}>{props.children}</div>;\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport './Avatar.css';\r\n\r\nconst Avatar = (props) => {\r\n  const { name } = props;\r\n\r\n  return (\r\n    <img\r\n      src={`https://avatars.dicebear.com/api/bottts/${name}.svg`}\r\n      alt={`${name} profile`}\r\n      className=\"avatar-profile-image\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default Avatar;\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport './Comment.css';\r\nimport Avatar from '../Avatar/Avatar';\r\n\r\nconst Comment = (props) => {\r\n  const { comment } = props;\r\n  return (\r\n    <div className=\"comment\">\r\n      <div className=\"comment-metadata\">\r\n        <Avatar name={comment.author} />\r\n        <p className=\"comment-author\">{comment.author}</p>\r\n        <p className=\"comment-created-time\">\r\n          {moment.unix(comment.created_utc).fromNow()}\r\n        </p>\r\n      </div>\r\n      <ReactMarkdown source={comment.body} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Comment;\r\n","import React, { useState } from 'react';\r\nimport Skeleton from 'react-loading-skeleton';\r\nimport './Post.css';\r\nimport {\r\n  TiArrowUpOutline,\r\n  TiArrowUpThick,\r\n  TiArrowDownOutline,\r\n  TiArrowDownThick,\r\n  TiMessage,\r\n} from 'react-icons/ti';\r\nimport moment from 'moment';\r\nimport shortenNumber from '../../utils/shortenNumber';\r\nimport Card from '../../components/Card/Card';\r\nimport Comment from '../Comment/Comment';\r\nimport Avatar from '../Avatar/Avatar';\r\n\r\nconst Post = (props) => {\r\n  const [voteValue, setVoteValue] = useState(0);\r\n\r\n  const { post, onToggleComments } = props;\r\n\r\n  /**\r\n   * @param {number} newValue The new vote value\r\n   */\r\n  const onHandleVote = (newValue) => {\r\n    if (newValue === voteValue) {\r\n      setVoteValue(0);\r\n    } else if (newValue === 1) {\r\n      setVoteValue(1);\r\n    } else {\r\n      setVoteValue(-1);\r\n    }\r\n  };\r\n\r\n  const renderUpVote = () => {\r\n    if (voteValue === 1) {\r\n      return <TiArrowUpThick className=\"icon-action\" />;\r\n    }\r\n    return <TiArrowUpOutline className=\"icon-action\" />;\r\n  };\r\n\r\n  const renderDownVote = () => {\r\n    if (voteValue === -1) {\r\n      return <TiArrowDownThick className=\"icon-action\" />;\r\n    }\r\n    return <TiArrowDownOutline className=\"icon-action\" />;\r\n  };\r\n\r\n  const getVoteType = () => {\r\n    if (voteValue === 1) {\r\n      return 'up-vote';\r\n    }\r\n    if (voteValue === -1) {\r\n      return 'down-vote';\r\n    }\r\n\r\n    return '';\r\n  };\r\n\r\n  const renderComments = () => {\r\n    if (post.errorComments) {\r\n      return (\r\n        <div>\r\n          <h3>Error loading comments</h3>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (post.loadingComments) {\r\n      return (\r\n        <div>\r\n          <Skeleton />\r\n          <Skeleton />\r\n          <Skeleton />\r\n          <Skeleton />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (post.showingComments) {\r\n      return (\r\n        <div>\r\n          {post.comments.map((comment) => (\r\n            <Comment comment={comment} key={comment.id} />\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <article key={post.id}>\r\n      <Card>\r\n        <div className=\"post-wrapper\">\r\n          <div className=\"post-votes-container\">\r\n            <button\r\n              type=\"button\"\r\n              className={`icon-action-button up-vote ${\r\n                voteValue === 1 && 'active'\r\n              }`}\r\n              onClick={() => onHandleVote(1)}\r\n              aria-label=\"Up vote\"\r\n            >\r\n              {renderUpVote()}\r\n            </button>\r\n            <p className={`post-votes-value ${getVoteType()}`}>\r\n              {shortenNumber(post.ups, 1)}\r\n            </p>\r\n            <button\r\n              type=\"button\"\r\n              className={`icon-action-button down-vote ${\r\n                voteValue === -1 && 'active'\r\n              }`}\r\n              onClick={() => onHandleVote(-1)}\r\n              aria-label=\"Down vote\"\r\n            >\r\n              {renderDownVote()}\r\n            </button>\r\n          </div>\r\n          <div className=\"post-container\">\r\n            <h3 className=\"post-title\">{post.title}</h3>\r\n\r\n            <div className=\"post-link-container\">\r\n              <a href={post.url} target=\"_self\" style={{color: \"crimson\" }}>Read Full Post</a>\r\n            </div>\r\n\r\n            <div className=\"post-details\">\r\n              <span className=\"author-details\">\r\n                <Avatar name={post.author} />\r\n                <span className=\"author-username\">{post.author}</span>\r\n              </span>\r\n              <span>{moment.unix(post.created_utc).fromNow()}</span>\r\n              <span className=\"post-comments-container\">\r\n                <button\r\n                  type=\"button\"\r\n                  className={`icon-action-button ${\r\n                    post.showingComments && 'showing-comments'\r\n                  }`}\r\n                  onClick={() => onToggleComments(post.permalink)}\r\n                  aria-label=\"Show comments\"\r\n                >\r\n                  <TiMessage className=\"icon-action\" />\r\n                </button>\r\n                {shortenNumber(post.num_comments, 1)}\r\n              </span>\r\n            </div>\r\n\r\n            {renderComments()}\r\n          </div>\r\n        </div>\r\n      </Card>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","/**\r\n * Generates a number between min and max.\r\n * @param {number} min\r\n * @param {number} max\r\n */\r\nexport default (min, max) => {\r\n  return Math.floor(Math.random() * max) + min;\r\n};\r\n","import React from 'react';\r\nimport Skeleton from 'react-loading-skeleton';\r\nimport './Post.css';\r\nimport './PostLoading.css';\r\nimport {\r\n  TiArrowUpOutline,\r\n  TiArrowDownOutline,\r\n  TiMessage,\r\n} from 'react-icons/ti';\r\nimport getRandomNumber from '../../utils/getRandomNumber';\r\n\r\nconst PostLoading = () => {\r\n  return (\r\n    <article className=\"post\">\r\n      <div className=\"post-votes-container\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"icon-action-button up-vote\"\r\n          aria-label=\"Up vote\"\r\n        >\r\n          <TiArrowUpOutline className=\"icon-action\" />\r\n        </button>\r\n        <Skeleton className=\"post-votes-value post-votes-value-loading\" />\r\n        <button\r\n          type=\"button\"\r\n          className=\"icon-action-button down-vote\"\r\n          aria-label=\"Down vote\"\r\n        >\r\n          <TiArrowDownOutline className=\"icon-action\" />\r\n        </button>\r\n      </div>\r\n      <div className=\"post-container\">\r\n        <h3 className=\"post-title\">\r\n          <Skeleton width={getRandomNumber(100, 200)} />\r\n        </h3>\r\n\r\n        <div className=\"post-image-container\">\r\n          <Skeleton height={250} />\r\n        </div>\r\n\r\n        <div className=\"post-details\">\r\n          <span>\r\n            <Skeleton width={getRandomNumber(20, 50)} />\r\n          </span>\r\n          <span>\r\n            <Skeleton width={getRandomNumber(50, 100)} />\r\n          </span>\r\n          <span className=\"post-comments-container\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"icon-action-button\"\r\n              aria-label=\"Show comments\"\r\n            >\r\n              <TiMessage className=\"icon-action\" />\r\n            </button>\r\n            <Skeleton width={getRandomNumber(10, 50)} />\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default PostLoading;\r\n","export const API_ROOT = 'https://www.reddit.com';\r\n\r\nexport const getSubredditPosts = async (subreddit) => {\r\n  const response = await fetch(`${API_ROOT}${subreddit}.json`);\r\n  const json = await response.json();\r\n\r\n  return json.data.children.map((post) => post.data);\r\n};\r\n\r\nexport const getSubreddits = async () => {\r\n  const response = await fetch(`${API_ROOT}/subreddits.json`);\r\n  const json = await response.json();\r\n\r\n  return json.data.children.map((subreddit) => subreddit.data);\r\n};\r\n\r\nexport const getPostComments = async (permalink) => {\r\n  const response = await fetch(`${API_ROOT}${permalink}.json`);\r\n  const json = await response.json();\r\n\r\n  return json[1].data.children.map((subreddit) => subreddit.data);\r\n};\r\n","import { createSlice, createSelector } from '@reduxjs/toolkit';\r\nimport { getSubredditPosts, getPostComments } from '../api/reddit';\r\n\r\nconst initialState = {\r\n  posts: [],\r\n  error: false,\r\n  isLoading: false,\r\n  searchTerm: '',\r\n  selectedSubreddit: localStorage.getItem(\"selectedSubreddit\") || '/r/Coding/',\r\n};\r\n\r\nconst redditSlice = createSlice({\r\n  name: 'redditPosts',\r\n  initialState,\r\n  reducers: {\r\n    setPosts(state, action) {\r\n      state.posts = action.payload;\r\n    },\r\n    startGetPosts(state) {\r\n      state.isLoading = true;\r\n      state.error = false;\r\n    },\r\n    getPostsSuccess(state, action) {\r\n      state.isLoading = false;\r\n      state.posts = action.payload;\r\n    },\r\n    getPostsFailed(state) {\r\n      state.isLoading = false;\r\n      state.error = true;\r\n    },\r\n    setSearchTerm(state, action) {\r\n      state.searchTerm = action.payload;\r\n    },\r\n    setSelectedSubreddit(state, action) {\r\n      state.selectedSubreddit = action.payload;\r\n      state.searchTerm = '';\r\n    },\r\n    toggleShowingComments(state, action) {\r\n      state.posts[action.payload].showingComments = !state.posts[action.payload]\r\n        .showingComments;\r\n    },\r\n    startGetComments(state, action) {\r\n      state.posts[action.payload].showingComments = !state.posts[action.payload]\r\n        .showingComments;\r\n      if (!state.posts[action.payload].showingComments) {\r\n        return;\r\n      }\r\n      state.posts[action.payload].loadingComments = true;\r\n      state.posts[action.payload].error = false;\r\n    },\r\n    getCommentsSuccess(state, action) {\r\n      state.posts[action.payload.index].loadingComments = false;\r\n      state.posts[action.payload.index].comments = action.payload.comments;\r\n    },\r\n    getCommentsFailed(state, action) {\r\n      state.posts[action.payload].loadingComments = false;\r\n      state.posts[action.payload].error = true;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  getPostsFailed,\r\n  getPostsSuccess,\r\n  startGetPosts,\r\n  setSearchTerm,\r\n  setSelectedSubreddit,\r\n  getCommentsFailed,\r\n  getCommentsSuccess,\r\n  startGetComments,\r\n} = redditSlice.actions;\r\n\r\nexport default redditSlice.reducer;\r\n\r\nexport const fetchPosts = (subreddit) => async (dispatch) => {\r\n  try {\r\n    dispatch(startGetPosts());\r\n    const posts = await getSubredditPosts(subreddit);\r\n\r\n    const postsWithMetadata = posts.map((post) => ({\r\n      ...post,\r\n      showingComments: false,\r\n      comments: [],\r\n      loadingComments: false,\r\n      errorComments: false,\r\n    }));\r\n    dispatch(getPostsSuccess(postsWithMetadata));\r\n  } catch (error) {\r\n    dispatch(getPostsFailed());\r\n  }\r\n};\r\n\r\nexport const fetchComments = (index, permalink) => async (dispatch) => {\r\n  try {\r\n    dispatch(startGetComments(index));\r\n    const comments = await getPostComments(permalink);\r\n    dispatch(getCommentsSuccess({ index, comments }));\r\n  } catch (error) {\r\n    dispatch(getCommentsFailed(index));\r\n  }\r\n};\r\n\r\nconst selectPosts = (state) => state.reddit.posts;\r\nconst selectSearchTerm = (state) => state.reddit.searchTerm;\r\nexport const selectSelectedSubreddit = (state) =>\r\n  state.reddit.selectedSubreddit;\r\n\r\nexport const selectFilteredPosts = createSelector(\r\n  [selectPosts, selectSearchTerm],\r\n  (posts, searchTerm) => {\r\n    if (searchTerm !== '') {\r\n      return posts.filter((post) =>\r\n        post.title.toLowerCase().includes(searchTerm.toLowerCase())\r\n      );\r\n    }\r\n\r\n    return posts;\r\n  }\r\n);\r\n","import React, { useState, useEffect } from 'react';\r\nimport { HiOutlineSearch } from 'react-icons/hi';\r\nimport './Header.css';\r\nimport { FaReddit } from 'react-icons/fa';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setSearchTerm } from '../../store/redditSlice';\r\n\r\nconst Header = (props) => {\r\n  const [searchTermLocal, setSearchTermLocal] = useState('');\r\n  const searchTerm = useSelector((state) => state.reddit.searchTerm);\r\n  const threadTopic = props.selectedSubreddit;\r\n  const dispatch = useDispatch();\r\n\r\n  const onSearchTermChange = (e) => {\r\n    setSearchTermLocal(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSearchTermLocal(searchTerm);\r\n  }, [searchTerm]);\r\n\r\n  const onSearchTermSubmit = (e) => {\r\n    e.preventDefault();\r\n    dispatch(setSearchTerm(searchTermLocal));\r\n  };\r\n\r\n  return (\r\n    <header>\r\n      <div className=\"logo\">\r\n        <FaReddit className=\"logo-icon\" />\r\n        <p>\r\n          Reddit<span>Minimal</span>\r\n        </p>\r\n      </div>\r\n      <form className=\"search\" onSubmit={onSearchTermSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder={`Search ${threadTopic}`}\r\n          value={searchTermLocal}\r\n          onChange={onSearchTermChange}\r\n          aria-label=\"Search posts\"\r\n        />\r\n        <button type=\"submit\" onClick={onSearchTermSubmit} aria-label=\"Search\">\r\n          <HiOutlineSearch />\r\n        </button>\r\n      </form>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AnimatedList } from 'react-animated-list';\r\nimport Post from '../Post/Post';\r\nimport PostLoading from '../Post/PostLoading';\r\nimport getRandomNumber from '../../utils/getRandomNumber';\r\nimport {\r\n  fetchPosts,\r\n  selectFilteredPosts,\r\n  setSearchTerm,\r\n  fetchComments\r\n} from '../../store/redditSlice';\r\nimport './Home.css';\r\nimport Header from '../Header/Header';\r\n\r\nconst Home = () => {\r\n  const reddit = useSelector((state) => state.reddit);\r\n  const { isLoading, error, searchTerm, selectedSubreddit } = reddit;\r\n  const posts = useSelector(selectFilteredPosts);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n      dispatch(fetchPosts(selectedSubreddit));\r\n  }, [selectedSubreddit]);\r\n\r\n  useEffect(() => { //whenever the 'selectedSubreddit' changes, there is no error in state, and there is one or more posts in state, scroll the 'View Popular Subreddits' <button> into view\r\n      if(!error && posts.length !== 0) {\r\n          document.getElementsByTagName(\"BUTTON\")[0].scrollIntoView();\r\n      }\r\n  }, [posts.length, selectedSubreddit]);\r\n\r\n  const onToggleComments = (index) => {\r\n      return (permalink) => {\r\n          dispatch(fetchComments(index, permalink));\r\n      };\r\n  };\r\n\r\n  if(isLoading) {\r\n    return (\r\n      <AnimatedList animation=\"zoom\">\r\n        {Array(getRandomNumber(3, 10)).fill(<PostLoading />)}\r\n      </AnimatedList>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"error\">\r\n        <h2>Failed to load posts.</h2>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => dispatch(fetchPosts(selectedSubreddit))}\r\n        >\r\n          Try again\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (posts.length === 0) {\r\n    return (\r\n      <div className=\"error\">\r\n        <h2>No posts matching \"{searchTerm}\"</h2>\r\n        <button type=\"button\" onClick={() => dispatch(setSearchTerm(''))}>\r\n          Go home\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <nav>\r\n        <button\r\n            type='button'\r\n            onClick={()=> {\r\n              document.getElementsByTagName(\"H2\")[0].scrollIntoView();\r\n            }}>\r\n          <span><u>View Popular Subreddits</u></span>\r\n        </button>\r\n      </nav>\r\n        <h1><span className='headingText'>Posts for <span className='topic'>{selectedSubreddit}</span></span></h1>\r\n      <Header selectedSubreddit={selectedSubreddit} />\r\n      {posts.map((post, index) => (\r\n        <Post\r\n          key={post.id}\r\n          post={post}\r\n          onToggleComments={onToggleComments(index)}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getSubreddits } from '../api/reddit';\r\n\r\nconst initialState = {\r\n  subreddits: [],\r\n  error: false,\r\n  isLoading: false,\r\n};\r\n\r\nconst subRedditSlice = createSlice({\r\n  name: 'subreddits',\r\n  initialState,\r\n  reducers: {\r\n    startGetSubreddits(state) {\r\n      state.isLoading = true;\r\n      state.error = false;\r\n    },\r\n    getSubredditsSuccess(state, action) {\r\n      state.isLoading = false;\r\n      state.subreddits = action.payload;\r\n    },\r\n    getSubredditsFailed(state) {\r\n      state.isLoading = false;\r\n      state.error = true;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  getSubredditsFailed,\r\n  getSubredditsSuccess,\r\n  startGetSubreddits,\r\n} = subRedditSlice.actions;\r\n\r\nexport default subRedditSlice.reducer;\r\n\r\nexport const fetchSubreddits = () => async (dispatch) => {\r\n  try {\r\n    dispatch(startGetSubreddits());\r\n    const subreddits = await getSubreddits();\r\n    dispatch(getSubredditsSuccess(subreddits));\r\n  } catch (error) {\r\n    dispatch(getSubredditsFailed());\r\n  }\r\n};\r\n\r\nexport const selectSubreddits = (state) => state.subreddits.subreddits;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Card from '../../components/Card/Card';\r\nimport { fetchSubreddits, selectSubreddits } from '../../store/subRedditSlice';\r\nimport './Subreddits.css';\r\nimport {\r\n    setSelectedSubreddit,\r\n    selectSelectedSubreddit\r\n} from '../../store/redditSlice';\r\n\r\nconst Subreddits = () => {\r\n  const dispatch = useDispatch();\r\n  const subreddits = useSelector(selectSubreddits);\r\n  const selectedSubreddit = useSelector(selectSelectedSubreddit);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchSubreddits());\r\n  }, []);\r\n\r\n  return (\r\n    <Card className=\"subreddit-card\">\r\n        <h2><span>Popular Subreddits</span></h2>\r\n        <button\r\n            className='blockDisplay'\r\n            onClick={()=> {\r\n                document.getElementsByTagName(\"BUTTON\")[0].scrollIntoView();\r\n            }}>View Posts for <span>{selectedSubreddit}</span></button>\r\n      <ul className=\"subreddits-list\">\r\n        {subreddits.map((subreddit) => (\r\n          <li\r\n            key={subreddit.id}\r\n            className={`${\r\n              selectedSubreddit === subreddit.url && `selected-subreddit`\r\n            }`}\r\n          >\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                  dispatch(setSelectedSubreddit(subreddit.url));\r\n                  localStorage.setItem(\"selectedSubreddit\", subreddit.url);\r\n              }}\r\n            >\r\n              <img\r\n                src={\r\n                  subreddit.icon_img ||\r\n                  `https://avatars.dicebear.com/api/avataaars/${subreddit.display_name}.svg`\r\n                }\r\n                alt={`${subreddit.display_name}`}\r\n                className=\"subreddit-icon\"\r\n                style={{ border: `3px solid ${subreddit.primary_color}` }}\r\n              />\r\n              {subreddit.display_name}\r\n            </button>\r\n          </li>\r\n        ))}\r\n        <li\r\n            key='coding'\r\n            className={`${selectedSubreddit === '/r/Coding/' && `selected-subreddit`}`}\r\n        >\r\n              <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                      dispatch(setSelectedSubreddit('/r/Coding/'));\r\n                      localStorage.setItem(\"selectedSubreddit\", \"/r/Coding/\");\r\n                  }}\r\n                  className='topic1'\r\n              >\r\n                  <span>Coding Discussion</span>\r\n              </button>\r\n        </li>\r\n        <li\r\n            key='conspiracy'\r\n            className={`${selectedSubreddit === '/r/Conspiracy/' && `selected-subreddit`}`}\r\n        >\r\n              <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                      dispatch(setSelectedSubreddit('/r/Conspiracy/'));\r\n                      localStorage.setItem(\"selectedSubreddit\", \"/r/Conspiracy/\");\r\n                  }}\r\n                  className='topic2'\r\n              >\r\n                  <span>Conspiracy Theories</span>\r\n              </button>\r\n        </li>\r\n          <li\r\n              key='coronavirus'\r\n              className={`${selectedSubreddit === '/r/Coronavirus/' && `selected-subreddit`}`}\r\n          >\r\n              <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                      dispatch(setSelectedSubreddit('/r/Coronavirus/'));\r\n                      localStorage.setItem(\"selectedSubreddit\", \"/r/Coronavirus/\");\r\n                  }}\r\n                  className='topic3'\r\n              >\r\n                  <span>Coronavirus Discussion</span>\r\n              </button>\r\n          </li>\r\n          <li\r\n            key='debateEvolution'\r\n            className={`${selectedSubreddit === '/r/DebateEvolution/' && `selected-subreddit`}`}\r\n          >\r\n              <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                      dispatch(setSelectedSubreddit('/r/DebateEvolution/'));\r\n                      localStorage.setItem(\"selectedSubreddit\", \"/r/DebateEvolution/\")\r\n                  }}\r\n                  className='topic4'\r\n              >\r\n                  <span>Evolutionary Debate</span>\r\n              </button>\r\n          </li>\r\n          <li\r\n              key='debateReligion'\r\n              className={`${selectedSubreddit === '/r/DebateReligion/' && `selected-subreddit`}`}\r\n          >\r\n              <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                      dispatch(setSelectedSubreddit('/r/DebateReligion/'));\r\n                      localStorage.setItem(\"selectedSubreddit\", \"/r/DebateReligion/\");\r\n                  }}\r\n                  className='topic5'\r\n              >\r\n                  <span>Religious Debate</span>\r\n              </button>\r\n          </li>\r\n          <li\r\n              key='soccer'\r\n              className={`${selectedSubreddit === '/r/Soccer/' && `selected-subreddit`}`}\r\n          >\r\n              <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                      dispatch(setSelectedSubreddit('/r/Soccer/'));\r\n                      localStorage.setItem(\"selectedSubreddit\", \"/r/Soccer/\");\r\n                  }}\r\n                  className='topic6'\r\n              >\r\n                  <span>Soccer Chat</span>\r\n              </button>\r\n          </li>\r\n      </ul>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Subreddits;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Home from './features/Home/Home';\r\nimport Subreddits from './features/Subreddits/Subreddits';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <main>\r\n          <Home />\r\n          <Subreddits />\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, combineReducers } from '@reduxjs/toolkit';\r\nimport redditReducer from './redditSlice';\r\nimport subRedditReducer from './subRedditSlice';\r\n\r\nexport default configureStore({\r\n  reducer: combineReducers({\r\n    reddit: redditReducer,\r\n    subreddits: subRedditReducer,\r\n  }),\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}